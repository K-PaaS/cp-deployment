---
- name: Download step
  become: false
  get_url:
    url: https://github.com/smallstep/cli/releases/download/v0.24.4/step_linux_0.24.4_amd64.tar.gz
    dest: "{{ lookup('env', 'HOME') }}/step.tar.gz"

- name: Unarchive step
  shell: |
    tar zxf {{ lookup('env', 'HOME') }}/step.tar.gz
    mv step_0.24.4/bin/step /usr/local/bin
    chmod +x /usr/local/bin/step

- name: Create certs/cluster dir
  become: false
  file:
    path: "{{ lookup('env', 'HOME') }}/certs/{{ item }}"
    state: directory
  with_sequence: start=1 end={{ cluster_count }} format=cluster%d

- name: Create rootCA certificate
  become: false
  shell: step certificate create root.istio.io {{ lookup('env', 'HOME') }}/certs/root-cert.pem {{ lookup('env', 'HOME') }}/certs/root-ca.key --profile root-ca --no-password --insecure --san root.istio.io --not-after 87600h --kty RSA

- name: Create certificate
  become: false
  shell: |
    step certificate create {{ item }}.intermediate.istio.io {{ lookup('env', 'HOME') }}/certs/{{ item }}/ca-cert.pem {{ lookup('env', 'HOME') }}/certs/{{ item }}/ca-key.pem --ca {{ lookup('env', 'HOME') }}/certs/root-cert.pem --ca-key {{ lookup('env', 'HOME') }}/certs/root-ca.key --profile intermediate-ca --not-after 87600h --no-password --insecure --san {{ item }}.intermediate.istio.io --kty RSA
    cat {{ lookup('env', 'HOME') }}/certs/{{ item }}/ca-cert.pem {{ lookup('env', 'HOME') }}/certs/root-cert.pem > {{ lookup('env', 'HOME') }}/certs/{{ item }}/cert-chain.pem
  with_sequence: start=1 end={{ cluster_count }} format=cluster%d

- name: Check kube-apiserver
  become: false
  shell: |
    echo $(kubectl --context={{ item }} get pods -n kube-system | grep kube-apiserver | awk 'NR==1 { print $3 }')
  register: kube_status
  until: kube_status.stdout == "Running"
  retries: 15
  delay: 30
  with_sequence: start=1 end={{ cluster_count }} format=cluster%d

- name: Create istio-system namespace
  become: false
  shell: |
    kubectl --context={{ item }} create ns istio-system
  ignore_errors: yes
  with_sequence: start=1 end={{ cluster_count }} format=cluster%d

- name: Create CA certs secret
  become: false
  shell: kubectl --context={{ item }} create secret generic cacerts -n istio-system --from-file={{ lookup('env', 'HOME') }}/certs/{{ item }}/ca-cert.pem --from-file={{ lookup('env', 'HOME') }}/certs/{{ item }}/ca-key.pem --from-file={{ lookup('env', 'HOME') }}/certs/root-cert.pem --from-file={{ lookup('env', 'HOME') }}/certs/{{ item }}/cert-chain.pem
  ignore_errors: yes
  with_sequence: start=1 end={{ cluster_count }} format=cluster%d

- name: Install istio
  become: false
  shell: |
    istioctl install -y --context=cluster{{ item }} -f - <<EOF
    apiVersion: install.istio.io/v1alpha1
    kind: IstioOperator
    metadata:
      name: istio-controlplane
    spec:
      profile: demo
      meshConfig:
        enablePrometheusMerge: true
        defaultConfig:
          proxyMetadata:
            ISTIO_META_DNS_CAPTURE: "true"
            ISTIO_META_DNS_AUTO_ALLOCATE: "true"
      components:
        egressGateways:
          - name: istio-egressgateway
            enabled: false
        ingressGateways:
          - name: istio-ingressgateway
            enabled: false
      values:
        sidecarInjectorWebhook:
          rewriteAppHTTPProbe: false
        global:
          meshID: mesh1
          multiCluster:
            clusterName: cluster{{ item }}
          network: network{{ item }}
    EOF
  with_sequence: start=1 end={{ cluster_count }} format=%d

- name: Install istio
  become: false
  shell: |
    istioctl install -y --context=cluster{{ item }} -f - <<EOF
    apiVersion: install.istio.io/v1alpha1
    kind: IstioOperator
    metadata:
      name: istio-ingressgateway
    spec:
      profile: empty
      components:
        ingressGateways:
          - name: istio-ingressgateway
            label:
              istio: ingressgateway
              app: istio-ingressgateway
              topology.istio.io/network: network{{ item }}
            enabled: true
            k8s:
              env:
                - name: ISTIO_META_ROUTER_MODE
                  value: "sni-dnat"
                - name: ISTIO_META_REQUESTED_NETWORK_VIEW
                  value: network{{ item }}
              service:
                ports:
                  - name: status-port
                    port: 15021
                    targetPort: 15021
                  - name: http2
                    port: 80
                    targetPort: 8080
                  - name: https
                    port: 443
                    targetPort: 8443
                  - name: tcp
                    port: 31400
                    targetPort: 31400
                  - name: mtls
                    port: 15443
                    targetPort: 15443
                  - name: tcp-istiod
                    port: 15012
                    targetPort: 15012
                  - name: tcp-webhook
                    port: 15017
                    targetPort: 15017
      values:
        global:
          meshID: mesh1
          multiCluster:
            clusterName: cluster{{ item }}
          network: network{{ item }}
    EOF
  with_sequence: start=1 end={{ cluster_count }} format=%d

- name: Set label istio-system
  become: false
  shell: |
    kubectl --context=cluster{{ item }} label namespace istio-system topology.istio.io/network=network{{ item }}
  ignore_errors: yes
  with_sequence: start=1 end={{ cluster_count }} format=%d

- name: Expose service
  become: false
  shell: |
    kubectl --context=cluster{{ item }}  apply -f {{ lookup('env', 'HOME') }}/cp-deployment/applications/istio-1.23.2/samples/multicluster/expose-services.yaml -n istio-system
  ignore_errors: yes
  with_sequence: start=1 end={{ cluster_count }} format=%d

- name: Enable endpoint discovery
  become: false
  vars:
    clusters: "{{ lookup('sequence', 'start=1 end=' + (cluster_count | int | string) + ' format=cluster%d').split(',') | list }}"
  shell: |
    istioctl create-remote-secret --name={{ item[1] }} --context={{ item[1] }} | kubectl --context={{ item[0] }} apply -f -
  loop: "{{ clusters | product(clusters) | list }}"
  when: item[0] != item[1]

- name: Patch loadbalancer svc external ip
  become: false
  shell: |
    kubectl --context=cluster{{ item }} patch svc ingress-nginx -p '{"spec":{"loadBalancerIP":"{{ ingress_nginx_ip[item | int - 1] }}"}}' -n ingress-nginx
    kubectl --context=cluster{{ item }} patch svc istio-ingressgateway -p '{"spec":{"loadBalancerIP":"{{ istio_gateway_private_ip[item | int - 1] }}"}}' -n istio-system
  ignore_errors: yes
  with_sequence: start=1 end={{ cluster_count }} format=%d
