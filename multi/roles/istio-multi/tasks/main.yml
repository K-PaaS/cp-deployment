---
- name: Download step
  become: false
  get_url:
    url: https://github.com/smallstep/cli/releases/download/v0.24.4/step_linux_0.24.4_amd64.tar.gz
    dest: "{{ lookup('env', 'HOME') }}/step.tar.gz"

- name: Unarchive step
  shell: |
    tar zxvf {{ lookup('env', 'HOME') }}/step.tar.gz
    mv step_0.24.4/bin/step /usr/local/bin
    chmod +x /usr/local/bin/step

- name: Create certs/cluster1 dir
  become: false
  file:
    path: "{{ lookup('env', 'HOME') }}/certs/cluster1"
    state: directory

- name: Create certs/cluster2 dir
  become: false
  file:
    path: "{{ lookup('env', 'HOME') }}/certs/cluster2"
    state: directory

- name: Crate rootCA certificate
  become: false
  shell: step certificate create root.istio.io {{ lookup('env', 'HOME') }}/certs/root-cert.pem {{ lookup('env', 'HOME') }}/certs/root-ca.key --profile root-ca --no-password --insecure --san root.istio.io --not-after 87600h --kty RSA

- name: Create certificate (cluster1)
  become: false
  shell: |
    step certificate create cluster1.intermediate.istio.io {{ lookup('env', 'HOME') }}/certs/cluster1/ca-cert.pem {{ lookup('env', 'HOME') }}/certs/cluster1/ca-key.pem --ca {{ lookup('env', 'HOME') }}/certs/root-cert.pem --ca-key {{ lookup('env', 'HOME') }}/certs/root-ca.key --profile intermediate-ca --not-after 87600h --no-password --insecure --san cluster1.intermediate.istio.io --kty RSA
    cat {{ lookup('env', 'HOME') }}/certs/cluster1/ca-cert.pem {{ lookup('env', 'HOME') }}/certs/root-cert.pem > {{ lookup('env', 'HOME') }}/certs/cluster1/cert-chain.pem

- name: Create certificate (cluster2)
  become: false
  shell: |
    step certificate create cluster2.intermediate.istio.io {{ lookup('env', 'HOME') }}/certs/cluster2/ca-cert.pem {{ lookup('env', 'HOME') }}/certs/cluster2/ca-key.pem --ca {{ lookup('env', 'HOME') }}/certs/root-cert.pem --ca-key {{ lookup('env', 'HOME') }}/certs/root-ca.key --profile intermediate-ca --not-after 87600h --no-password --insecure --san cluster2.intermediate.istio.io --kty RSA
    cat {{ lookup('env', 'HOME') }}/certs/cluster2/ca-cert.pem {{ lookup('env', 'HOME') }}/certs/root-cert.pem > {{ lookup('env', 'HOME') }}/certs/cluster2/cert-chain.pem

- name: Create istio-system namespace (cluster1, cluster2)
  become: false
  shell: |
    kubectl --context=cluster1 create ns istio-system
    kubectl --context=cluster2 create ns istio-system
  ignore_errors: yes

- name: Create CA certs secret (cluster1)
  become: false
  shell: kubectl --context=cluster1 create secret generic cacerts -n istio-system --from-file={{ lookup('env', 'HOME') }}/certs/cluster1/ca-cert.pem --from-file={{ lookup('env', 'HOME') }}/certs/cluster1/ca-key.pem --from-file={{ lookup('env', 'HOME') }}/certs/root-cert.pem --from-file={{ lookup('env', 'HOME') }}/certs/cluster1/cert-chain.pem
  ignore_errors: yes

- name: Create CA certs secret (cluster2)
  become: false
  shell: kubectl --context=cluster2 create secret generic cacerts -n istio-system --from-file={{ lookup('env', 'HOME') }}/certs/cluster2/ca-cert.pem --from-file={{ lookup('env', 'HOME') }}/certs/cluster2/ca-key.pem --from-file={{ lookup('env', 'HOME') }}/certs/root-cert.pem --from-file={{ lookup('env', 'HOME') }}/certs/cluster2/cert-chain.pem
  ignore_errors: yes

- name: Install istio (cluster1, cluster2)
  become: false
  shell: |
    istioctl install -y --context=cluster1 -f - <<EOF
    apiVersion: install.istio.io/v1alpha1
    kind: IstioOperator
    spec:
      values:
        global:
          meshID: mesh1
          multiCluster:
            clusterName: cluster1
          network: network1
    EOF
    istioctl install -y --context=cluster2 -f - <<EOF
    apiVersion: install.istio.io/v1alpha1
    kind: IstioOperator
    spec:
      values:
        global:
          meshID: mesh1
          multiCluster:
            clusterName: cluster2
          network: network2
    EOF

- name: Set label istio-system (cluster1, cluster2)
  become: false
  shell: |
    kubectl --context=cluster1 label namespace istio-system topology.istio.io/network=network1
    kubectl --context=cluster2 label namespace istio-system topology.istio.io/network=network2
  ignore_errors: yes

- name: Set mode eastwestgateway shell file
  file:
    path: "{{ lookup('env', 'HOME') }}/cp-deployment/applications/istio-1.19.0/samples/multicluster/gen-eastwest-gateway.sh"
    mode: 0755

- name: Install istio eastwestgateway (cluster1, cluster2)
  become: false
  shell: |
    {{ lookup('env', 'HOME') }}/cp-deployment/applications/istio-1.19.0/samples/multicluster/gen-eastwest-gateway.sh --mesh mesh1 --cluster cluster1 --network network1 | istioctl --context=cluster1 install -y -f -
    {{ lookup('env', 'HOME') }}/cp-deployment/applications/istio-1.19.0/samples/multicluster/gen-eastwest-gateway.sh --mesh mesh1 --cluster cluster2 --network network2 | istioctl --context=cluster2 install -y -f -

- name: Expose service (cluster1, cluster2)
  become: false
  shell: |
    kubectl --context=cluster1 apply -f {{ lookup('env', 'HOME') }}/cp-deployment/applications/istio-1.19.0/samples/multicluster/expose-services.yaml -n istio-system
    kubectl --context=cluster2 apply -f {{ lookup('env', 'HOME') }}/cp-deployment/applications/istio-1.19.0/samples/multicluster/expose-services.yaml -n istio-system
  ignore_errors: yes

- name: Enable endpoint discovery (cluster1, cluster2)
  become: false
  shell: |
    istioctl create-remote-secret --name=cluster2 --context=cluster2 | kubectl --context=cluster1 apply -f -
    istioctl create-remote-secret --name=cluster1 --context=cluster1 | kubectl --context=cluster2 apply -f -

- name: Patch loadbalancer svc external ip (cluster1, cluster2)
  become: false
  shell: |
    kubectl --context=cluster1 patch svc ingress-nginx-controller -p '{"spec":{"loadBalancerIP":"{{ cluster1_ingress_nginx_private_ip }}"}}' -n ingress-nginx
    kubectl --context=cluster1 patch svc istio-ingressgateway -p '{"spec":{"loadBalancerIP":"{{ cluster1_istio_ingress_private_ip }}"}}' -n istio-system
    kubectl --context=cluster1 patch svc istio-eastwestgateway -p '{"spec":{"loadBalancerIP":"{{ cluster1_istio_eastwest_private_ip }}"}}' -n istio-system
    kubectl --context=cluster2 patch svc ingress-nginx-controller -p '{"spec":{"loadBalancerIP":"{{ cluster2_ingress_nginx_private_ip }}"}}' -n ingress-nginx
    kubectl --context=cluster2 patch svc istio-ingressgateway -p '{"spec":{"loadBalancerIP":"{{ cluster2_istio_ingress_private_ip }}"}}' -n istio-system
    kubectl --context=cluster2 patch svc istio-eastwestgateway -p '{"spec":{"loadBalancerIP":"{{ cluster2_istio_eastwest_private_ip }}"}}' -n istio-system
  ignore_errors: yes
